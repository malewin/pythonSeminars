# list1 = [1, 2, 3, 5, 8, 15, 23, 38]
# res = map(int, list1) # функция map принимает два аргумента: функцию которую применит к каждому итерируемому обьекту во втором аргументе
# res = filter(lambda x: x % 2 == 0, res) # функция filter выдает только те значения которые true после двоеточия из опять же иттерируемого аргумента 2
# res = list(map(lambda x: (x, x**2), res))
# print(res)

#zip-функция берет несколько иттерируемых наборов (коллекции) и создает новый набор из кортежей значений взятых соответственно из каждой коллекции
# создает по минимальнмоу количеству во входящем наборе, пример:
# clients = ['tondomainer', 'author', 'elector', 'fuhao']
# domainsValue = [1140, 381, 150, 20]
# paidTonAmount = ['10500ton', '9700ton', '15000ton', '20000ton']
# slovar = list(zip(clients, domainsValue, paidTonAmount))
# print(slovar)

#функция enumerate() принимает на вход список и выдает список из кортежей где 1ое-индекс значения, 2ое - само значение списка
# clients = ['tondomainer', 'author', 'elector', 'fuhao']
# print(dict(enumerate(clients)))
# print(tuple(enumerate(clients)))
# print(set(enumerate(clients)))
# print(list(enumerate(clients)))

#работа с файлами:
# 1. Завести переменную которая будет связана с файлом
# 2. Указать пут ьк файлу
# 3. Указать в каком режиме мы будем работать с файлом.
# Варианты режима (мод):
# а - открытие для добавления данных.
# о
# Позволяет дописывать что-то в имеющийся файл.
# Если вы попробуете дописать что-то в несуществующий файл, то файл будет создан и в него начнется запись.
# г - открытие для чтения данных.

# Позволяет читать данные из файла.
# Если вы попробуете считать данные из файла, которого не существует, программа выдаст ошибку.
# w - открытие для записи данных.

# Позволяет записывать данные и создавать файл, если его не существует.

# Миксованные режимы:
# 1
# W+
# Позволяет открывать файл для записи и читать из него.
# Если файла не существует, он будет создан.


# R+ 
# Позволяет открывать файл для чтения и дописывать в него.
# Если файла не существует, программа выдаст ошибку.

#пример 

# clients = ['tondomainer', 'author', 'elector', 'fuhao']
# domainsValue = [1140, 381, 150, 20]
# paidTonAmount = ['10500ton', '9700ton', '15000ton', '20000ton']
# slovar = str(list(zip(clients, domainsValue, paidTonAmount)))

# data = open('file.txt', 'a') # а-мод при котором сразу создастся файл так как его не сущетсвует
# data.write(slovar)
# data.close()

# with open('file.txt', 'w') as data:
#     data.writelines(slovar)

# path = 'file.txt'
# data = open('file.txt', 'r')
# for item in data:
#     print(item)
# data.close()


# Модуль os
# Модуль о предоставляет множество функций для работы с операционной системой, причем их поведение, как правило, не зависит от ОС, поэтому программы остаются переносимыми.
# Для того, чтобы начать работать с данным модулем необходимо его импортировать в свою программу:
# import os
# Познакомимся с базовыми функциями данного модуля:
# •
# os.chdir (path) - смена текущей директории.
# import os
# os. chdir ('C: /Users/79190/PycharmProjects/GB')
# •
# os.getcwd0 - текущая рабочая директория
# import os
# print (os .getcwd () ) # 'C: \Users\79190\PycharmProjects \webproject*

# Модуль os
# •
# os.path - является вложенным модулем в модуль ов и реализует некоторые полезные функции для работы с путями, такие как.
# os.path.basename(path) - базовое имя пути
# import os
# •
# print (os.path. basename (°C: /Users/79190/PycharmProjects/webproject/main.py')) + 'main.py'
# os.path.abspath (path) - возвращает нормализованный абсолютный путь.
# import os
# print (os.path. abspath ('main .py')) t 'Ci /Users/79190/PycharmProjects/webproject/main.py*
# Это лишь малая часть возможностей модуля os 

# Модуль shutil
# Модуль shutil содержит набор функций высокого уровня для обработки файлов, групп файлов, и папок. 
# В частности, доступные здесь функции позволяют копировать, перемещать и удалять файлы и папки. Часто используется вместе с модулем os.
# Для того, чтобы начать работать с данным модулем необходимо его импортировать в свою программу:
# import shutil
# Познакомимся с базовыми функциями данного модуля:

# shutil.copyfile(src, dst) - копирует содержимое (но не метаданные) файла зг в файл dst. 
# shutil.copy(src, dst) - копирует содержимое файла зг в файл или папку dst. 
# shutil.rmtree (path) - Удаляет текущую директорию и все поддиректории; 
# path должен указывать на директорию, а не на символическую ссылку.