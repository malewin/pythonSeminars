#task49

# """ Планеты вращаются вокруг звезд по эллиптическим орбитам. 
# Назовем самой далекой планетой ту, орбита которой имеет самую большую площадь. 
# Напишите функцию find_farthest_orbit(list_of_orbits), которая среди списка орбит планет 
# найдет ту, по которой вращается самая далекая планета. Круговые орбиты не учитывайте: 
# вы знаете, что у вашей звезды таких планет нет, зато искусственные спутники были были 
# запущены на круговые орбиты. Результатом функции должен быть кортеж, содержащий длины 
# полуосей эллипса орбиты самой далекой планеты. Каждая орбита представляет из себя кортеж 
# из пары чисел - полуосей ее эллипса. Площадь эллипса вычисляется по формуле
# S = pi*a*b, где a и b - длины полуосей эллипса. При решении задачи используйте списочные выражения. 
# Подсказка: проще всего будет найти эллипс в два шага: сначала вычислить самую большую площадь эллипса, 
# а затем найти и сам эллипс, имеющий такую площадь. Гарантируется, что самая далекая планета ровно одна
# Ввод: orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))
# Вывод: 2.5 10 """

# solution1
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]

# def find_farthest_orbit(spis):
#     result = max(spis, key = lambda len: len[0] * len[1]*(len[0] != len[1]))
#     # key это функция, возвращающающая ОДНО значение len для max из spis на каждой итерации spis
#     # len[0] != len[1] исключает круглые орбиты
#     return result

# print(*find_farthest_orbit(orbits))

#solution2
import math
orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
ellipse_square=lambda a, b: math.pi*a*b
find_max_far_orbit=lambda lst_orbits: max([ellipse_square(*i) for i in lst_orbits if len(set(i))!=1])
find_farthest_orbit_params=lambda lst_orbits: lst_orbits[[ellipse_square(*i) for i in lst_orbits].index(find_max_far_orbit(lst_orbits))]
print(*find_farthest_orbit_params(orbits))